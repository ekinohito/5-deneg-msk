/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Mutation: {};
  Query: {};
  User: { // root type
    email?: string | null; // String
    id?: number | null; // Int
    name?: string | null; // String
  }
  Volunteer: { // root type
    dateOfBirth?: NexusGenScalars['DateTime'] | null; // DateTime
    eventsCount?: number | null; // Int
    fullDescription?: string | null; // String
    id?: number | null; // Int
    interests?: string | null; // String
    langs?: string | null; // String
    picture?: string | null; // String
    rating?: number | null; // Float
    shortDescription?: string | null; // String
    skills?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    alterRating: number | null; // Float
    signupUser: NexusGenRootTypes['User'] | null; // User
    upsertVolunteer: NexusGenRootTypes['Volunteer'] | null; // Volunteer
  }
  Query: { // field return type
    login: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
    volunteer: NexusGenRootTypes['Volunteer'] | null; // Volunteer
    volunteer2: NexusGenRootTypes['Volunteer'] | null; // Volunteer
    volunteers: Array<NexusGenRootTypes['Volunteer'] | null> | null; // [Volunteer]
  }
  User: { // field return type
    email: string | null; // String
    id: number | null; // Int
    name: string | null; // String
  }
  Volunteer: { // field return type
    dateOfBirth: NexusGenScalars['DateTime'] | null; // DateTime
    eventsCount: number | null; // Int
    fullDescription: string | null; // String
    id: number | null; // Int
    interests: string | null; // String
    langs: string | null; // String
    picture: string | null; // String
    rating: number | null; // Float
    shortDescription: string | null; // String
    skills: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    alterRating: 'Float'
    signupUser: 'User'
    upsertVolunteer: 'Volunteer'
  }
  Query: { // field return type name
    login: 'String'
    user: 'User'
    volunteer: 'Volunteer'
    volunteer2: 'Volunteer'
    volunteers: 'Volunteer'
  }
  User: { // field return type name
    email: 'String'
    id: 'Int'
    name: 'String'
  }
  Volunteer: { // field return type name
    dateOfBirth: 'DateTime'
    eventsCount: 'Int'
    fullDescription: 'String'
    id: 'Int'
    interests: 'String'
    langs: 'String'
    picture: 'String'
    rating: 'Float'
    shortDescription: 'String'
    skills: 'String'
    user: 'User'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    alterRating: { // args
      id: number; // Int!
      rating: number; // Int!
    }
    signupUser: { // args
      email: string; // String!
      name: string; // String!
      password: string; // String!
    }
    upsertVolunteer: { // args
      dateOfBirth?: string | null; // String
      fullDescription: string; // String!
      id: number; // Int!
      interests: string; // String!
      langs: string; // String!
      picture?: string | null; // String
      shortDescription?: string | null; // String
      skills: string; // String!
    }
  }
  Query: {
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    user: { // args
      email?: string | null; // String
      userId?: number | null; // Int
    }
    volunteer: { // args
      id: number; // Int!
    }
    volunteer2: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}